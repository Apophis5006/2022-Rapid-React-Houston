/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/
//#define CALSWERVE  //Move all gears to left side of robot and then read the Zero values for table
//#define CALHOOD
#include <stdio.h>
#include <frc/Joystick.h>
#include <frc/DigitalInput.h>
#include <frc/TimedRobot.h>
#include <frc/Timer.h>
#include "ctre/Phoenix.h"
#include <opencv2/core/core.hpp>
#include <opencv2/core/types.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <thread>
#include "networktables/NetworkTable.h"
#include "networktables/NetworkTableInstance.h"
#include <vector>

#include <frc/PneumaticsControlModule.h>
#include <frc/Solenoid.h>
#include <frc/smartdashboard/SmartDashboard.h>
#include "ahrs.h" //https://www.kauailabs.com/public_files/navx-mxp/apidocs/c++/

//LimeLight Defines

#define TARGET 0
#define CAMERA 1
#define TARGET_ABOVE_CAMERA	6.33	// Vertical Distance from camera to center of reflective tape = 6.33 ft
//#define GOAL_ABOVE_SHOOTER	6.00	// Vertical Distance from shooter to center of upper goal = 6.00 ft
//#define ADD_TO_INNER_GOAL	2.4375	// Horizontal Distance from outer goal to inner goal = 2'5.25"
#define CAMERA_ANGLE	20.00 //40	// Angle (Pitch) of mounted camera
std::shared_ptr<nt::NetworkTable> table = nt::NetworkTableInstance::GetDefault().GetTable("limelight");
double targetOffsetAngleHorizontal = table->GetNumber("tx",0.0);
double targetOffsetAngleVertical = table->GetNumber("ty",0.0);
double targetArea = table->GetNumber("ta",0.0);


#define TIMEOUT 10
#define NOTIMEOUT 0
#define TRUE 1
#define FALSE 0

int Initialized = 0;
int HoodInitialized=0;

//Intake variables
int IntakeIsDown = 0;
int Magazine_On = 0;
int Intake_On=0;
int AutoShootState=0;
double Drive_Speed_Target=0;

//Shooter Variables
int Shooter_On = 0, Shooter_Trigger_On = 0, ShooterState = 00;
float Shooter_Speed_Target = 0;
int WasTelop=0, WasAuto=0;
int HoodTarget=0,HoodLocation, HoodMax=0,CalcHoodTarget;
float ShooterVelocity=0;
int TriggerRunning=0;

//Joystick defines
#define DIR 0
#define ROT 1
#define ARM 2

#define PVALUE 1.0
//-------------------CAN BUS DEFINES---------------
//Swerve CAN bus defines for steering motors
#define FLS 4
#define FRS 1
#define RLS 2
#define RRS 3
//Swerve CAN bus defines for drive motors
#define FLD 15
#define FRD 12
#define RLD 13
#define RRD 14
//CAN Bus defines for intake motor
#define INTAKE 8
#define MAGAZINE 7
#define TRIGGER 5
#define HOOD 6
#define SHOOTER 11

//For swerve code, define motor data locations in the arrays
#define RR 0
#define FR 1
#define FL 2
#define RL 3
#define ALL -1 /* all drive channels */
#define IDX  3 /* use Rear Left Wheel as index */
#define PI 3.141592654
#define SW_L 18.75   //Distance between wheels from front to back
#define SW_W 18.75  //Distance between wheels from side to side


#define STATE_HOLD 0
#define STATE_FILL_MAGAZINE 1
#define STATE_TRIGGER 2
#define STATE_END 3


int TeleStarted=1;
int FieldCentric=1;   //1= feild centric driving
float RobotAngle=0.0; //angle from Gyro
int UpdateCount=0;    //counter to slow screen update so it does not take too many CPU cycles
int AutoTargeting=0;
float GoalYOffset=0;
int hoodPercent=0;

//Swerve Control variables  RR, FR, FL, RL
float SpeedPolarity[4]={1.0,1.0,1.0,1.0}; //which way is forward on wheels (switches to speed up swerve rotations)
float ActDir[4]={0.0,0.0,0.0,0.0};        //storage for actual angles of wheel from motor controller encoder feedback
#ifdef CALSWERVE
float ZeroDir[4]={0.0,0.0,0.0,0.0};  //storage for adjustment of actual angles of wheel from motor controller encoder feedback
#else
//float ZeroDir[4]={-67.0,119.0,68.0,201.0};  //storage for adjustment of actual angles of wheel from motor controller encoder feedback
//float ZeroDir[4]={-73.0,116.0,156.0,208.0};  //storage for adjustment of actual angles of wheel from motor controller encoder feedback
float ZeroDir[4]={-59,-61,-190,204}; //new encoder positions, values after 120 broke stuff
                                //-208
#endif
float TargetDir[4]={0.0,0.0,0.0,0.0};     //target degrees of each wheel
float ModDir[4]={0.0,0.0,0.0,0.0};        //rotational modification degrees of each wheel to adjust target
float ModSpd[4]={0.0,0.0,0.0,0.0};        //speed modification degrees of each wheel to adjust target
double SWRVY;							  //Swerve Control Variable--Represents Y coordinate of drive joystick
double SWRVX;                             //Swerve Control Variable--Represents X coordinate of drive joystick
double SWRVZ;                             //Swerve Control Variable--Represents X coordinate of rotate joystick
float delta =0.0;                         //local variable for determining best way(least delta degrees) to meet rotatioanl target
AHRS *ahrs;  //gyro
int TestNum=250;
double PercentData = 0;
int TargetIndex=0;
float ShooterError=0.0;

#define NUM_DATA_CELLS 6
const double ShooterTable[3][NUM_DATA_CELLS]{
    { 24, 20, 12, 3.9, -1.5,  -6,},//-20}, //Distance
    { 25, 27, 30, 36,    37,  48,},//60}, //Hood Angle
    {225,235,240,242,   248, 262,}//270} //Velocity
};

//`Autonomous field positions
int StartingLocation = 0;
#define RED1    1   //(frc::DriverStation::kRed*10+1)   //removed until fixed
//#define RED2  (frc::DriverStation::kRed*10+2)
//#define RED3  (frc::DriverStation::kRed*10+3)
//#define BLUE1  (frc::DriverStation::kBlue*10+1)
//#define BLUE2 (frc::DriverStation::kBlue*10+2)
//#define BLUE3  (frc::DriverStation::kBlue*10+3)

#define NUMAUTOLINES 30

#define START 10
#define STOP  11
#define MOVE  12
#define FIRE  13
//Auto Pilot variables
    float TargetAngle;
	float CurrentAngle;
	float RotPwr;
	int    AutoLine=0,FirstPass=0,AutoFire=0;
	double RobotX[4]={0.0,0.0,0.0,0.0},RobotY[4]={0.0,0.0,0.0,0.0};
	double AutoDriveX, AutoDriveY, AutoDriveZ;

int (*AutoArray)[8];
 
// 2 Ball Auto
#define BNPW 75
int	TwoBall_AutoArray[NUMAUTOLINES][8]={
	        //CMD,   Acc mSec,Dec Inches, MaxPwr,TargetX, TargetY, Orientation Deg,IntakeState
			{START,      0,         0,      0,      0,      0,        0,            0},	//Start at midfield location
			{MOVE,    500,          5,   BNPW,     0,     -43,        0,            1},	//Move back to ball on field
			{FIRE,       0,        0,        0,     0,      0,        0,            1},	//pin 1
			{STOP,       0,         0,      0,       0,      0,        0,           0},	//STOP
};

int Test_Commands_AutoArray[NUMAUTOLINES][8]={  //`added to test commands
            //CMD,   Acc mSec,Dec Inches, MaxPwr,TargetX, TargetY, Orientation Deg,IntakeState
			{START,      0,         0,      0,      0,      0,        0,            0},	//Start at midfield location
            {MOVE,    20,          5,   BNPW,     0,     -20,        0,            1},
            {STOP,       0,         0,      0,       0,      0,        0,           0},
};

int outRemainingInches;

class Robot : public frc::TimedRobot
{
public:
    void RobotInit(void);
//AUTONOMOUS DRIVING STATE MACHINE
    void AutoStateMachine(void){
		int  *Array, RemainingInches;
		int MaxFromDcel,MaxFromAcel;
		double MaxPower,X,Y,Z ,DeltaA,fctr;
	    int Command, AccSec, DecInches, Speed, AutoX, AutoY, Orientation, IntakeDIR;
        //point data to current autonomous command line
	    Array = Test_Commands_AutoArray[AutoLine];
		Command = *(Array+0);
		Orientation=*(Array+6);
		Speed=*(Array+3);
		AccSec=*(Array+1);
		DecInches=*(Array+2);
        AutoX=*(Array+4);
		AutoY=*(Array+5);
		IntakeDIR=*(Array+7);
        
        
        
		//distance to target
		RemainingInches=sqrt(pow((RobotX[IDX]-AutoX),2)+pow((RobotY[IDX]-AutoY),2));
		//Max speed percentage based on deceleration value given 
		MaxFromDcel=(pow(RemainingInches,2)*10000)/pow(DecInches,2);
		//Get msec since we started and divide by msec to full power for power limit from acceleration
		MaxFromAcel=(int)(AutoTimer.Get()*100000)/AccSec;

		//MaxFromAcel=100;
		//MaxFromDcel=100;

        if(MaxFromDcel<MaxFromAcel){
			MaxPower=(MaxFromDcel*Speed)/100;
        }else{
			MaxPower=(MaxFromAcel*Speed)/100;
		}
		if(MaxPower>Speed)MaxPower=Speed;
		if(MaxPower<0)MaxPower=0;
		//Calculate the X,Y direction to target
		X=(AutoX-(int)RobotX[IDX]);
		Y=(AutoY-(int)RobotY[IDX]);
		//Calculate the delta in the robot orientation target
		DeltaA=(RobotAngle-Orientation);
		Z=(DeltaA*-1.0)/90.0;
		if(Z>1.0)Z=1.0;
		if(Z<-1.0) Z=-1.0;

		if(AutoLine>NUMAUTOLINES) Command=STOP; //in case no one put in a stop command
		if(IntakeDIR>0){
			Intake_On=1;
            
		} 

		switch(Command){ //command mode
		    case START: 
			            RobotX[IDX]=(double)AutoX;
						RobotY[IDX]=(double)AutoY;
						ResetGyro();
						AutoLine++;
						FirstPass=1;
					    break;
			case MOVE:  //Determine direction and rotation values from autonomous command
			            fctr=fabs(X)+fabs(Y);
						if(fctr==0.0) fctr=1.0;
						
						
						AutoDriveX=(double)((X/(fctr))*MaxPower)/100.0;
						AutoDriveY=(double)((Y/(fctr))*MaxPower)/100.0;
		               
					    AutoDriveZ=Z; //(double)(pow(Z,3)/15);
					

						if(RemainingInches<(Speed/5)){
                           AutoLine++;
						   AutoTimer.Reset();
						   FirstPass=1;
						}else FirstPass=0;
                        
                        


						break;
            case FIRE:  //Determine direction and rotation values from autonomous command
			           if(FirstPass) AutoFire=1;
                       if(!AutoFire){ //Ball Shot?
                           AutoLine++;
						   AutoTimer.Reset();
						   FirstPass=1;
                       }else FirstPass=0;
                        break;
		    
			default:
			case STOP:
						AutoDriveX=0.0;
						AutoDriveY=0.0;
						AutoDriveZ=0.0;
						FirstPass=0;
						break;
			
		}

		
       outRemainingInches = RemainingInches;

    }
  int ShooterStable(){
      
      //Shooter Velocity is a negatve number, Target is posative
     if(Shooter_Speed_Target>1) ShooterError=100*(Shooter_Speed_Target+ShooterVelocity)/Shooter_Speed_Target;
     else ShooterError=100;
      if(ShooterError>10) return(0);
      else return(1);
  }  

  void SetShooterVals(){
        
        
        //could add binary search, but it isn't really worth the effort
        
        for(int i=1;i<NUM_DATA_CELLS;i++){
            if(ShooterTable[0][i] < GoalYOffset){
                PercentData = (GoalYOffset - ShooterTable[0][i-1]) / (ShooterTable[0][i] - ShooterTable[0][i-1]);
                //Sets Angle and Velocity
                CalcHoodTarget=((ShooterTable[1][i]-ShooterTable[1][i-1]) * PercentData) + ShooterTable[1][i-1];
                Shooter_Speed_Target = ((ShooterTable[2][i]-ShooterTable[2][i-1]) * PercentData) + ShooterTable[2][i-1];

                TargetIndex=i;
                
                break;
            }
        }

        if(GoalYOffset<ShooterTable[0][NUM_DATA_CELLS-1]){
            CalcHoodTarget=(ShooterTable[1][NUM_DATA_CELLS-1]);
            Shooter_Speed_Target = ShooterTable[2][NUM_DATA_CELLS-1];
        }

        //Shooter_Speed_Target=220; //!!!Temporary
    }

	void SetHood(int percent){ // In percent 0-100
        #ifdef CALHOOD
            Hood_Motor.Set(ControlMode::PercentOutput,Arm_Stick.GetY());
        #else
        //#define HOOD_MAX -5270
        #define HOOD_MIN (HoodMax-1200)     //get acurate values through testing 

        hoodPercent = percent;
        if(HoodInitialized==1){
            HoodResetTimer.Reset();
            HoodResetTimer.Start();
            HoodInitialized=2;
        }
        if(HoodResetTimer.Get()>2_s){
           
            if(HoodMax==0){
                  HoodInitialized=3;
                  HoodResetTimer.Stop();
                  HoodMax=Hood_Motor.GetSelectedSensorPosition();
            }    
         
            HoodTarget=(((100-percent)*((HoodMax-HOOD_MIN))+50)/100) + HOOD_MIN; 
           
            if(percent>=HoodMax) percent = HoodMax;
            if(percent<=HOOD_MIN) percent = HOOD_MIN;
        
            Hood_Motor.Set(ControlMode::Position,HoodTarget);
       
            HoodLocation=(int)Hood_Motor.GetSelectedSensorPosition();
        }
       #endif
    }

    void TargetLime(void)
    {
              
            //Get offset values from Limelight
            targetOffsetAngleHorizontal = table->GetNumber("tx",0.0);
            targetOffsetAngleVertical = table->GetNumber("ty",0.0);
            targetArea = table->GetNumber("ta",0.0); //area
                 
            if (targetArea>0){  //Shooter in autotarget and target in view
                GoalYOffset = targetOffsetAngleVertical; //TARGET_ABOVE_CAMERA / tan((CAMERA_ANGLE + targetOffsetAngleVertical) * PI / 180.0);
            } else{
                GoalYOffset = -100000;
            }
            

        
    }
    void Climber()
    {
    }
    void Intake()
    {
     
        if (Dir_Stick.GetRawButton(3)) //Intake Up
        {
            IntakeIsDown = 0;
            Intake_Up.Set(1);
            Intake_Down.Set(0);
        }
        else if (Dir_Stick.GetTrigger())//Make Intake Down
        {
            IntakeIsDown = 1;
            Intake_Up.Set(0);
            Intake_Down.Set(1);
        }
        //Intake balls if not shooting
        if(!Shooter_On){
            if (Dir_Stick.GetTrigger())
            {
                Intake_On=1; 
                Magazine_On = 1;
            }
            else if (Dir_Stick.GetRawButton(2))
            {
                Intake_On=-1; 
                Magazine_On = -1;
            }
            else
            {
                Intake_On=0; 
                Magazine_On = 0;
            }
        }
   
       
        if(Intake_On==1){
           Intake_Motor.Set(ControlMode::PercentOutput, 1.0);//forward
        }else if(Intake_On==-1){
            Intake_Motor.Set(ControlMode::PercentOutput, -1.0);//reverse
        }else{
            Intake_Motor.Set(ControlMode::PercentOutput, 0);//off
        }

        if(Magazine_On==1&&BallDetect.Get()&&!TriggerRunning){
           Magazine_On=0;
        }
        if (Magazine_On == 1) {
            Magazine_Motor.Set(ControlMode::PercentOutput, -1); //forward
        }else if (Magazine_On == -1) {
            Magazine_Motor.Set(ControlMode::PercentOutput, 1.0);//reverse
        } else{
            Magazine_Motor.Set(ControlMode::PercentOutput, 0); //off
        }
    }

#define TRIGGER_TIME 0.5_s
    void Shooter()
    {
        
        if(Arm_Stick.GetRawButton(3)){//manual targeting
            AutoTargeting=0;
            SetHood((int)((Arm_Stick.GetZ()+1.0)*50.0));
            Shooter_On=1;
            Magazine_On=1;
            if(Arm_Stick.GetTrigger()){
                Intake_On=1;
                Shooter_Trigger_On=1;
               
            }else{
                Shooter_Trigger_On=0;
            }
            
        }else{ //Automatic Mode

            switch (AutoShootState){
                default:
                        AutoShootState=STATE_HOLD;
                        break;
                case STATE_HOLD:
                       
                        if(!AutoTargeting){
                            AutoTargeting=1;
                            AutoShootState=STATE_END;
                        }else if(Arm_Stick.GetTrigger()){
                             AutoShootState=STATE_FILL_MAGAZINE;
                            SpinUpTimer.Reset();
                            SpinUpTimer.Start();
                        } 
                         break;
                case STATE_FILL_MAGAZINE:
                        if(!Arm_Stick.GetTrigger()) AutoShootState=STATE_END;
                        
                        if(!BallDetect.Get()) Magazine_On=1;
                        else Magazine_On=0;
                       
                        Shooter_On=1;
                        Intake_On=1;
                        if(BallDetect.Get()&&(ShooterStable()||SpinUpTimer.Get()>4_s)){
                            AutoShootState=STATE_TRIGGER;
                        }
                         break;
                case STATE_TRIGGER:
                        Magazine_On=1;
                        Shooter_On=1;
                        Intake_On=1;
                        Shooter_Trigger_On=1;
                        if(TriggerTimer.Get()>TRIGGER_TIME+0.5_s&&!Arm_Stick.GetTrigger()){
                            AutoShootState=STATE_END;
                        }
                        break;
                 case STATE_END:
                        Magazine_On=0;
                        Shooter_On=0;
                        Intake_On=0;
                        Shooter_Trigger_On=0;
                        AutoShootState=STATE_HOLD;
                        break;

            }
          
            if(targetOffsetAngleVertical>-100000&&AutoShootState!=STATE_HOLD){
                SetShooterVals(); //makes sure that the limelight sees the target
                //!!!Add code to auto rotate swerves
                SetHood(hoodPercent);

            } 
        }
        TriggerRunning=0;
        if(Shooter_Trigger_On){
                if(TriggerTimer.Get()>TRIGGER_TIME){
                    Trigger_Motor.Set(ControlMode::PercentOutput, 0); //off
                }else{
                    TriggerRunning=1;
                    Trigger_Motor.Set(ControlMode::PercentOutput,-.6); //trigger running
                }        
         }else{
             TriggerTimer.Reset();
             Trigger_Motor.Set(ControlMode::PercentOutput, 0); //off
         } 

        if(Shooter_On){
            if(!AutoTargeting) Shooter_Speed_Target=((int)((Dir_Stick.GetZ()+1.0)*256.0));
        }else{
           Shooter_Speed_Target=0;
        }
        if(Arm_Stick.GetRawButton(12)){
             Shooter_Speed_Target=100;
             Shooter_Trigger_On=1;
        } 

        Shooter_Motor.Set(ControlMode::Velocity,Shooter_Speed_Target); //0 to 1024 //inverted from -
        ShooterVelocity=Shooter_Motor.GetSelectedSensorVelocity(1)/64;
      
        
    }

    int gUpdateCount = 0; ///counter to be sure we only update drive screen every once in a while so it does not bog down the network
    void UpdateDriverScreen(void)
    {
        char str[40];

        if (gUpdateCount <= 0)
        {
            gUpdateCount = 25; //delay between displays to not bog down system
            sprintf(str, "H:%d,T%d,A%d,P%d", HoodInitialized,HoodTarget,HoodLocation,hoodPercent);
            frc::SmartDashboard::PutString("DB/String 0", str);
           /*sprintf(str, "Yaw T%d,A%d", Turret_X_Target, TurretEncoderCounts);
            frc::SmartDashboard::PutString("DB/String 1", str);
            sprintf(str, "Shooter Spd %f", Shooter_Speed_Target);
    
            frc::SmartDashboard::PutString("DB/String 3", str);
            sprintf(str, "TAngle %4.2f", targetOffsetAngleHorizontal);
			frc::SmartDashboard::PutString("DB/String 4", str);
			sprintf(str, "TelIME %4.2f ZT:%d", TelopTimer.Get(),ZeroTurret);
			frc::SmartDashboard::PutString("DB/String 5", str);
			//sprintf(str, "Elv T%d,A%d",WinchTarget,WinchEncoderCounts);
			//frc::SmartDashboard::PutString("DB/String 6", str);
            sprintf(str, "Joy Y %4.2f,",Turret_Stick.GetY());
			frc::SmartDashboard::PutString("DB/String 6", str);
			sprintf(str, "Drive speed %4.2f",Drive_Speed_Target);
			frc::SmartDashboard::PutString("DB/String 7", str);
*/		//	sprintf(str, "Pos %d",RRSteer.GetSensorCollection().GetPulseWidthPosition());
		//	frc::SmartDashboard::PutString("DB/String 1", str);

            
            sprintf(str, "PD:%4.2f I:%d",PercentData,TargetIndex);
			frc::SmartDashboard::PutString("DB/String 7", str);
            sprintf(str, "Ang%3.0f,Err%3.0f",RobotAngle,ShooterError);
			frc::SmartDashboard::PutString("DB/String 6", str);
            //`sprintf(str, "S:T%5.0f,A%5.0f",Shooter_Speed_Target,ShooterVelocity);
            sprintf(str,"RI%d",outRemainingInches);
            frc::SmartDashboard::PutString("DB/String 5", str);
            sprintf(str, "FLPos %4.2f,%4.2f",ActDir[FL],ZeroDir[FL]);
			frc::SmartDashboard::PutString("DB/String 1", str);
            sprintf(str, "FRPos %4.2f,%4.2f",ActDir[FR],ZeroDir[FR]);
			frc::SmartDashboard::PutString("DB/String 2", str);
            sprintf(str, "RLPos %4.2f,%4.2f",ActDir[RL],ZeroDir[RL]);
			frc::SmartDashboard::PutString("DB/String 3", str);
            sprintf(str, "RRPos %4.2f,%4.2F",ActDir[RR],ZeroDir[RR]);
			frc::SmartDashboard::PutString("DB/String 4", str);
  //          sprintf(str, "L %4.2f R %4.2f",-Left_Stick.GetZ(), -Right_Stick.GetZ());
//			frc::SmartDashboard::PutString("DB/String 9", str);
            
            
			sprintf(str, "TY %4.2f Area %4.2f",targetOffsetAngleVertical, targetArea);
			//sprintf(str,"RX%4.2fRY%4.2f",RobotX,RobotY);
            frc::SmartDashboard::PutString("DB/String 8", str);
			sprintf(str, "TX %4.2f Dst %4.2f", targetOffsetAngleHorizontal,GoalYOffset);
			frc::SmartDashboard::PutString("DB/String 9", str);
            sprintf(str, "BD %d",BallDetect.Get());
            frc::SmartDashboard::PutString("DB/String 10",str);
           
        }
        gUpdateCount--;
    } // End UpdateDriverScreen
 //This is were the SWRVX,SWRVY,SWRVZ values are set to direct the swerve drives where to go
	void SwerveControl(void){
		//AutoPilot?
	    if(IsAutonomousEnabled()){
			FieldCentric=1; //Auto operates in field centric mode
		    SWRVY=AutoDriveY;
			SWRVX=AutoDriveX; 
		    SWRVZ=AutoDriveZ;
			if(SWRVZ>1.0)SWRVZ=1.0;
			if(SWRVZ<-1.0) SWRVZ=-1.0;
			if(SWRVY>1.0)SWRVY=1.0;
			if(SWRVY<-1.0) SWRVY=-1.0;
			if(SWRVX>1.0)SWRVX=1.0;
			if(SWRVX<-1.0) SWRVX=-1.0;
		}else{ //Teleop Mode
/*
            static bool boolFieldCentricDriving = true;
            static bool prevFieldCentricBtn = false;

            if (Rot_Stick.GetRawButton(2) ==! prevFieldCentricBtn){
            boolFieldCentricDriving =! boolFieldCentricDriving;
            FieldCentric = boolFieldCentricDriving;
            }
            prevFieldCentricBtn = Rot_Stick.GetRawButton(2);
*/
			SWRVY=-Dir_Stick.GetY();
			if (fabs(SWRVY)<0.1) SWRVY=0.0;
			SWRVX=Dir_Stick.GetX();
			if (fabs(SWRVX)<0.1) SWRVX=0.0;
			SWRVZ=Rot_Stick.GetX();
            if(!AutoTargeting){
                SWRVZ=Arm_Stick.GetX();
            }
            if(targetArea>0&&AutoTargeting&&AutoShootState!=STATE_HOLD){
                SWRVZ=(targetOffsetAngleHorizontal/5.0);
            }
			if(Rot_Stick.GetTrigger()) FieldCentric=0;
			else FieldCentric=1;	  
		}
		//Button 6 on left joystick resets the gyro to 0 degrees
		if(Rot_Stick.GetRawButton(6))
		{
			ResetGyro();
		}
	
  }	// End SwerveControl

  //Do the math on each wheel to find the new angle and speed required
  void  Calc4WheelTurn(){

	  double A,B,C,D,R,temp;
	  int i;
	  R=sqrt(pow(SW_L,2))+(pow(SW_W,2));

	  A=SWRVX-SWRVZ*(SW_L/R);
	  B=SWRVX+SWRVZ*(SW_L/R);
	  C=SWRVY-SWRVZ*(SW_W/R);
	  D=SWRVY+SWRVZ*(SW_W/R);

	  ModDir[FR] = atan2(B,C)*180/PI;
	  ModSpd[FR]=  sqrt(pow(B,2)+pow(C,2));

	  ModDir[FL] = atan2(B,D)*180/PI;
	  ModSpd[FL]=  sqrt(pow(B,2)+pow(D,2));

	  ModDir[RL] = atan2(A,D)*180/PI;
	  ModSpd[RL]=  sqrt(pow(A,2)+pow(D,2));

	  ModDir[RR] = atan2(A,C)*180/PI;
	  ModSpd[RR]=  sqrt(pow(A,2)+pow(C,2));

	  temp=0;
	  for(i=0;i<4;i++){
		  if(ModSpd[i]>temp) temp=ModSpd[i];
	  }
	  if(temp>1.0){
		  for(i=0;i<4;i++) ModSpd[i]/=temp;
	  }
 	 return;
  }

  //Modify the Target direction given the new the direction from Calc4WheelTurn() using shortest distance calculations
  void SetDirection(int channel) {
		int curdir;
 
		if(SpeedPolarity[channel] < 0.0){
			curdir=fmod((TargetDir[channel]+180.0),360.0);
		} else {
			curdir=fmod(TargetDir[channel],360.0);
		}
		
		delta=ModDir[channel]-curdir+ZeroDir[channel]; //What is the distance to move?  How best to get there...

		delta=fmod(delta,360.0);
		//Is Fastest way across 0 boundary?
		if(delta<-180.0) {  //Don't turn more than 180 degrees
			delta+=360.0;
		}
		if(delta>180.0) {
			delta-=360.0;
		}
		if(delta<=90.0 && delta>=-90.0) { //direct move without direction change
			TargetDir[channel]+=delta;
		} else {
			if(delta>90.0) delta-=180.0;
			if(delta<-90.0) delta+=180.0;
			TargetDir[channel]-=delta;
			if(SpeedPolarity[channel]>0.0 ) SpeedPolarity[channel]=-1.0; //switch directions so we steer less
			else SpeedPolarity[channel]=1.0;
		}
	}	// End SetDirection

	float CVTSpeed(float speed) {
			if(speed>1.0) speed=1.0;
			if(speed<-1.0) speed=-1.0;
			return(-speed);
    }	// End CVTSpeed

	//controlling the direction and speed of the swerve drives
    void SwerveDrive(void) {
    	int i;
    	float Gyro,temp;
    	//Read encoder counts and then divide to get degrees of rotation
    	ActDir[FL]=fmod((FLSteer.GetSensorCollection().GetPulseWidthPosition()/11.38) - ZeroDir[FL],360.0); 
		ActDir[FR]=fmod((FRSteer.GetSensorCollection().GetPulseWidthPosition()/11.38) - ZeroDir[FR],360.0);
    	ActDir[RL]=fmod((RLSteer.GetSensorCollection().GetPulseWidthPosition()/11.38) - ZeroDir[RL],360.0);
    	ActDir[RR]=fmod((RRSteer.GetSensorCollection().GetPulseWidthPosition()/11.38) - ZeroDir[RR],360.0);

		//If rotational power is low, just don't rotate
        if(IsAutonomous()){
               //SWRVZ=pow(3*SWRVZ,3);
		}else{

			if (fabs(SWRVZ)<0.1){
				SWRVZ=0.0;
			}else{
				//if(Rot_Stick.GetRawButton(8)) { // button 8 for fast rotation
					SWRVZ=pow(2.5*SWRVZ,3);  // show off (or big, heavy frame)
				//} else {
				//	SWRVZ=pow(1*SWRVZ,3); // small frame normal rotation
				//}
			}
	    }

		//deermine if we are field or robot centric and make the adjustment here if necessary    
	    if(FieldCentric||IsAutonomous()) Gyro=RobotAngle*PI/180;
	    else Gyro=0;

		//modify the target robot direction from field centric to robot centric for wheel positions and then set them in calc4wheel
	    temp=SWRVY*cos(Gyro)+SWRVX*sin(Gyro);
	    SWRVX=-SWRVY*sin(Gyro)+SWRVX*cos(Gyro);
	    SWRVY=temp;
		Calc4WheelTurn();

		for(i=0;i<4;i++) SetDirection(i);

        
        //send the drive motor speeds to the motor controllers
		FLDrive.Set(ControlMode::PercentOutput,CVTSpeed(SpeedPolarity[FL]*ModSpd[FL]));
		FRDrive.Set(ControlMode::PercentOutput,-CVTSpeed(SpeedPolarity[FR]*ModSpd[FR]));
		RLDrive.Set(ControlMode::PercentOutput,CVTSpeed(SpeedPolarity[RL]*ModSpd[RL]));
		RRDrive.Set(ControlMode::PercentOutput,CVTSpeed(SpeedPolarity[RR]*ModSpd[RR]));

		FLSteer.Set(ControlMode::Position, (TargetDir[FL]/360.0)*4096);
	    FRSteer.Set(ControlMode::Position, (TargetDir[FR]/360.0)*4096);
	    RRSteer.Set(ControlMode::Position, (TargetDir[RR]/360.0)*4096);
		RLSteer.Set(ControlMode::Position, (TargetDir[RL]/360.0)*4096);
    }	// End SwerveDrive

double NewPosition[4],OldPosition[4];
	//Track robot FL wheel X,Y position in inches Y is long side of field X is width
    void TrackRobot(void){      //`not getting proper values, and causes remainingInches to break
		int i;
        double Dist,Dir;
		for(i=0;i<4;i++){
	     	//Determine distance moved since last time in this routine
			NewPosition[i]=GetLocation(i);
			Dist=NewPosition[i]-OldPosition[i];
			OldPosition[i]=NewPosition[i];
			Dir=ActDir[i]+RobotAngle;
			Dir=fmod(Dir,360.0);
			RobotX[i]+=Dist*sin((Dir*PI)/180.0);
			RobotY[i]+=Dist*cos((Dir*PI)/180.0);
		}
	}	// End TrackRobot

    double GetLocation(int i){
		double result;
		switch (i){ 
			case FL:
				result=FLDrive.GetSelectedSensorPosition();
				break;
			case FR:
				result=FRDrive.GetSelectedSensorPosition();
				break;
			case RL:
				result=RLDrive.GetSelectedSensorPosition();
				break;
			case RR:
				result=RRDrive.GetSelectedSensorPosition();
				break;
			default:
				result=0.0;
		}
		return(result/772.5); //678.44);
	}

    void ReadGyro(void) {
		RobotAngle = ahrs->GetYaw();
	}	// End ReadyGyro
	void ResetGyro(void) {
		ahrs->ZeroYaw();
	}	// End ResetGyro

    void AutonomousPeriodic() override
    {
        if (!Initialized)
        {
            RobotInit();
            StartingLocation = RED1; //`fix once you figure out how to get alliance
            switch(StartingLocation){
                //case RED1: AutoArray = *Test_Commands_AutoArray; break;
                break;
            }
        }
        	
		ReadGyro();              //get the angle of the robot in to variable "RobotAngle"
		TrackRobot();			//Track the Robot's FL wheel X,Y position around the field
		//AutoStateMachine is what is causing the break
        AutoStateMachine();      //Get updated directional commands from autopilot
		if(!FirstPass) {		// don't try to control anything when state changes
			SwerveControl();         //convert auto pilot commands to joystick motions
			SwerveDrive();           //Update the speed and direction of the swerve drive motors
		}
         TargetLime();
	     Intake();
         Shooter();
         UpdateDriverScreen();
    }

    void TeleopPeriodic() override
    {

        if (!Initialized)
        {
            RobotInit();
            Initialized=1;
        }
       #ifdef CALSWERVE
         if(Arm_Stick.GetRawButton(5)){ //`added for ease of use
         ZeroDir[FR]=Arm_Stick.GetX()*360.0;
         ZeroDir[FL]=Arm_Stick.GetX()*360.0;
         ZeroDir[RR]=Arm_Stick.GetX()*360.0;
         ZeroDir[RL]=Arm_Stick.GetX()*360.0;
         }
        // FLSteer.Set(ControlMode::Position, Arm_Stick.GetX()*4096.0);
        // RLSteer.Set(ControlMode::Position, Arm_Stick.GetX()*4096.0);
        // RRSteer.Set(ControlMode::Position, Arm_Stick.GetX()*4096.0);
       #endif
         SwerveControl(); 
	     SwerveDrive();
         ReadGyro();
         TargetLime();
	    //Climber();
         Intake();
         Shooter();
         UpdateDriverScreen();

       
         //SetShooterVals();
         hoodPercent=CalcHoodTarget;
    }

private:

   frc::Joystick Rot_Stick{ROT};
    frc::Joystick Dir_Stick{DIR};
    frc::Joystick Arm_Stick{ARM};

    TalonFX RLDrive = {RLD};
    TalonFX FLDrive = {FLD};
    TalonFX FRDrive = {FRD};
    TalonFX RRDrive = {RRD};
    TalonSRX Intake_Motor = {INTAKE};
    TalonSRX Magazine_Motor = {MAGAZINE};
    TalonFX Shooter_Motor = {SHOOTER};
    TalonSRX Hood_Motor = {HOOD};
    TalonSRX Trigger_Motor = {TRIGGER};
    TalonSRX RLSteer = {RLS};
    TalonSRX RRSteer = {RRS};
    TalonSRX FRSteer = {FRS};
    TalonSRX FLSteer = {FLS};

        
    frc::Solenoid Climber_Back{frc::PneumaticsModuleType::CTREPCM,0};
    frc::Solenoid Climber_Up{frc::PneumaticsModuleType::CTREPCM,1};
    frc::Solenoid Climber_Down{frc::PneumaticsModuleType::CTREPCM,2};
    frc::Solenoid Intake_Up{frc::PneumaticsModuleType::CTREPCM,3};
    frc::Solenoid Intake_Down{frc::PneumaticsModuleType::CTREPCM,4};
    frc::Solenoid WheelOF_Up{frc::PneumaticsModuleType::CTREPCM,5};
    frc::Solenoid WheelOF_Down{frc::PneumaticsModuleType::CTREPCM,6};
    frc::Solenoid Climber_Front{frc::PneumaticsModuleType::CTREPCM,7};

    frc::Timer ShooterTimer;
    frc::Timer SpinUpTimer;
    frc::Timer HoodResetTimer;
    frc::Timer ClimbTimer;
    frc::Timer AutoTimer;
    frc::Timer TelopTimer;
    frc::Timer TriggerTimer;

    frc::DigitalInput BallDetect{0};      

    
};

#ifndef RUNNING_FRC_TESTS
int main()
{
    return frc::StartRobot<Robot>();
}
#endif

void Robot::RobotInit()
{
    Initialized = 1;
    ahrs = new AHRS(frc::SPI::Port::kMXP);
    Climber_Front.Set(1);
    Climber_Back.Set(0);
    Climber_Up.Set(0);
    Climber_Down.Set(1);
    IntakeIsDown = 0;
    Intake_Up.Set(1);
    Intake_Down.Set(0);
    ClimbTimer.Start();
    ClimbTimer.Reset();

    SpinUpTimer.Start();
    SpinUpTimer.Reset();
    ShooterTimer.Start();
    ShooterTimer.Reset();
    HoodResetTimer.Start();
    HoodResetTimer.Reset();
    HoodInitialized=1;
    AutoTimer.Start();
    AutoTimer.Reset();
    TriggerTimer.Start();
  
    
    Hood_Motor.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition, 0, NOTIMEOUT);	
    Hood_Motor.SetSensorPhase(true);
    Hood_Motor.ConfigNominalOutputForward(0.0f, TIMEOUT);
    Hood_Motor.ConfigNominalOutputReverse(0.0f, TIMEOUT);
    Hood_Motor.ConfigPeakOutputForward(+12.0f, TIMEOUT);
    Hood_Motor.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
    Hood_Motor.SelectProfileSlot(0, 0);
    Hood_Motor.Config_kP(0, 1.0, TIMEOUT);
    Hood_Motor.Config_kI(0, 0.004, TIMEOUT);
    Hood_Motor.Config_kD(0, 0.0, TIMEOUT);
    Hood_Motor.Config_kF(0, 0.0, TIMEOUT);
    Hood_Motor.Set(ControlMode::PercentOutput, 0.5);

    
    Shooter_Motor.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition);
    Shooter_Motor.SetSensorPhase(true);
    Shooter_Motor.ConfigNominalOutputForward(0.0f, TIMEOUT);
    Shooter_Motor.ConfigNominalOutputReverse(0.0f, TIMEOUT);
    Shooter_Motor.ConfigPeakOutputForward(+12.0f, TIMEOUT);
    Shooter_Motor.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
    Shooter_Motor.SelectProfileSlot(0, 0);
    Shooter_Motor.Config_kP(0, 0.0, TIMEOUT);
    Shooter_Motor.Config_kI(0, 0.0, TIMEOUT);
    Shooter_Motor.Config_kD(0, 0.0, TIMEOUT);
    Shooter_Motor.Config_kF(0, 4.0, TIMEOUT);
    Shooter_Motor.Set(ControlMode::PercentOutput, 0.0);

    Magazine_Motor.ConfigNominalOutputForward(0.0f, TIMEOUT);
    Magazine_Motor.ConfigNominalOutputReverse(0.0f, TIMEOUT);
    Magazine_Motor.ConfigPeakOutputForward(+12.0f, TIMEOUT);
    Magazine_Motor.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
    Magazine_Motor.SelectProfileSlot(0, 0);
    Magazine_Motor.Config_kP(0, 0.5, TIMEOUT);
    Magazine_Motor.Config_kI(0, 0.0, TIMEOUT);
    Magazine_Motor.Config_kD(0, 0.0, TIMEOUT);
    Magazine_Motor.Set(ControlMode::PercentOutput, 0.0);


	    
	    FLSteer.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition, 0, NOTIMEOUT);
		FLSteer.SetSensorPhase(true);
		FLSteer.ConfigNominalOutputForward(0.0f, TIMEOUT);
		FLSteer.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	   	FLSteer.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	FLSteer.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		FLSteer.SelectProfileSlot(0, 0);
		FLSteer.Config_kP(0, PVALUE, TIMEOUT);
		FLSteer.Config_kI(0, 0.0, TIMEOUT);
		FLSteer.Config_kD(0, 0.0, TIMEOUT);
        FLSteer.Config_kF(0, 0.0, TIMEOUT);
  
		FLSteer.Set(ControlMode::Position, 0.0);
     
        
        FRSteer.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition, 0, NOTIMEOUT);	 
		FRSteer.SetSensorPhase(true);
	    FRSteer.ConfigNominalOutputForward(0.0f, TIMEOUT);
		FRSteer.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    FRSteer.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	FRSteer.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		FRSteer.SelectProfileSlot(0, 0);
		FRSteer.Config_kP(0, PVALUE, TIMEOUT);
		FRSteer.Config_kI(0, 0.0, TIMEOUT);
		FRSteer.Config_kD(0, 0.0, TIMEOUT);
		FRSteer.Set(ControlMode::Position, 0.0);

      
        RLSteer.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition, 0, NOTIMEOUT);	
		RLSteer.SetSensorPhase(true);
	    RLSteer.ConfigNominalOutputForward(0.0f, TIMEOUT);
		RLSteer.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    RLSteer.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	RLSteer.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		RLSteer.SelectProfileSlot(0, 0);
		RLSteer.Config_kP(0, PVALUE, TIMEOUT);
		RLSteer.Config_kI(0, 0.0, TIMEOUT);
		RLSteer.Config_kD(0, 0.0, TIMEOUT);
		RLSteer.Set(ControlMode::Position, 0.0);
    
 	    
        RRSteer.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition, 0, NOTIMEOUT);	 
		RRSteer.SetSensorPhase(true);
	    RRSteer.ConfigNominalOutputForward(0.0f, TIMEOUT);
		RRSteer.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    RRSteer.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	RRSteer.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		RRSteer.SelectProfileSlot(0, 0);
		RRSteer.Config_kP(0, PVALUE, TIMEOUT);
		RRSteer.Config_kI(0, 0.0, TIMEOUT);
		RRSteer.Config_kD(0, 0.0, TIMEOUT);
		RRSteer.Set(ControlMode::Position, 0.0);
		  
        RLDrive.GetSensorCollection().SetIntegratedSensorPosition(0);
        RLDrive.ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor, 0, NOTIMEOUT);	 // PIDLoop=0 
		RLDrive.SetSensorPhase(false);
	    RLDrive.ConfigNominalOutputForward(0.0f, TIMEOUT);
		RLDrive.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    RLDrive.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	RLDrive.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		RLDrive.SelectProfileSlot(0, 0);
		RLDrive.Config_kP(0, 0.5, TIMEOUT);
		RLDrive.Config_kI(0, 0.0, TIMEOUT);
		RLDrive.Config_kD(0, 0.0, TIMEOUT);
		RLDrive.Set(ControlMode::Position, 0.0);

		RRDrive.GetSensorCollection().SetIntegratedSensorPosition(0);
        RRDrive.ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor, 0, NOTIMEOUT);	 
		RRDrive.SetSensorPhase(false);
	    RRDrive.ConfigNominalOutputForward(0.0f, TIMEOUT);
		RRDrive.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    RRDrive.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	RRDrive.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		RRDrive.SelectProfileSlot(0, 0);
		RRDrive.Config_kP(0, 0.5, TIMEOUT);
		RRDrive.Config_kI(0, 0.0, TIMEOUT);
		RRDrive.Config_kD(0, 0.0, TIMEOUT);
		RRDrive.Set(ControlMode::Position, 0.0);

        FRDrive.GetSensorCollection().SetIntegratedSensorPosition(0);
        FRDrive.ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor, 0, NOTIMEOUT);	 
		FRDrive.SetSensorPhase(false);
	    FRDrive.ConfigNominalOutputForward(0.0f, TIMEOUT);
		FRDrive.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    FRDrive.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	FRDrive.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		FRDrive.SelectProfileSlot(0, 0);
		FRDrive.Config_kP(0, 0.5, TIMEOUT);
		FRDrive.Config_kI(0, 0.0, TIMEOUT);
		FRDrive.Config_kD(0, 0.0, TIMEOUT);
		FRDrive.Set(ControlMode::Position, 0.0);

		FLDrive.GetSensorCollection().SetIntegratedSensorPosition(0);
        FLDrive.ConfigSelectedFeedbackSensor(FeedbackDevice::IntegratedSensor, 0, NOTIMEOUT);	
		FLDrive.SetSensorPhase(false);
	    FLDrive.ConfigNominalOutputForward(0.0f, TIMEOUT);
		FLDrive.ConfigNominalOutputReverse(0.0f, TIMEOUT);
	    FLDrive.ConfigPeakOutputForward(+12.0f, TIMEOUT);
	 	FLDrive.ConfigPeakOutputReverse(-12.0f, TIMEOUT);
		FLDrive.SelectProfileSlot(0, 0);
		FLDrive.Config_kP(0, 0.5, TIMEOUT);
		FLDrive.Config_kI(0, 0.0, TIMEOUT);
		FLDrive.Config_kD(0, 0.0, TIMEOUT);
		FLDrive.Set(ControlMode::Position, 0.0);

  
}